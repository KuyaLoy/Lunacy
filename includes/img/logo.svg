<svg xmlns="http://www.w3.org/2000/svg" width="106.484" height="19.599" viewBox="0 0 106.484 19.599"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="Group_216" data-name="Group 216" transform="translate(-446 -112)">
    <path id="Path_107" data-name="Path 107" d="M0,0V19.6H14.364V15.68H3.919V0Z" transform="translate(446 112)" fill="#fff"/>
    <path id="Path_108" data-name="Path 108" d="M27.664,19.6H22.428a4.589,4.589,0,0,1-4.564-4.564V0h3.92V15.035a.671.671,0,0,0,.644.644h5.236a.6.6,0,0,0,.462-.2.64.64,0,0,0,.182-.448V0h3.92V15.035a4.392,4.392,0,0,1-1.344,3.22,4.335,4.335,0,0,1-3.22,1.344" transform="translate(446 112)" fill="#fff"/>
    <path id="Path_109" data-name="Path 109" d="M50.792,0V19.6h-3.92L40.348,8.428V19.6h-3.92V0h3.92l6.524,11.172V0Z" transform="translate(446 112)" fill="#fff"/>
    <path id="Path_110" data-name="Path 110" d="M65.24,1.091l3.92,7.84a1.827,1.827,0,0,1,.2.868v9.8h-3.92V14.362H58.911V19.6h-3.92V9.8a1.815,1.815,0,0,1,.2-.868l3.92-7.84A1.821,1.821,0,0,1,60.871,0h2.6A1.857,1.857,0,0,1,65.24,1.091m-6.329,9.184v.168h6.525v-.168L62.271,3.92h-.2Z" transform="translate(446 112)" fill="#fff"/>
    <path id="Path_111" data-name="Path 111" d="M83.356,19.6H78.12a4.591,4.591,0,0,1-4.565-4.564V4.563A4.387,4.387,0,0,1,74.9,1.344,4.387,4.387,0,0,1,78.12,0h5.236a4.331,4.331,0,0,1,3.22,1.344,4.393,4.393,0,0,1,1.343,3.219v1.96H84V4.563a.642.642,0,0,0-.182-.448.607.607,0,0,0-.462-.195H78.12a.669.669,0,0,0-.645.643V15.035a.671.671,0,0,0,.645.644h5.236A.623.623,0,0,0,84,15.035v-1.96h3.919v1.96a4.4,4.4,0,0,1-1.343,3.22,4.335,4.335,0,0,1-3.22,1.344" transform="translate(446 112)" fill="#fff"/>
    <path id="Path_112" data-name="Path 112" d="M102.564,3.752V0h3.92V4.564a2.027,2.027,0,0,1-.561,1.4l-4.647,4.647V19.6h-3.92V10.611L92.708,5.964a1.912,1.912,0,0,1-.588-1.4V0h3.92V3.752l3.276,3.275Z" transform="translate(446 112)" fill="#fff"/>
  </g>
</svg>