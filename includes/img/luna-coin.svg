<svg xmlns="http://www.w3.org/2000/svg" width="17.311" height="16.148" viewBox="0 0 17.311 16.148"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="Group_112" data-name="Group 112" transform="translate(-468.768 200.159)">
    <path id="Path_970" data-name="Path 970" d="M353.436,725.668a10.551,10.551,0,0,0,.371,4.562,4.605,4.605,0,0,1,1.218-1.735c-.186-1.669.3-2.719.986-2.992h0a1.084,1.084,0,0,1,.195-.056l.013,0c.024,0,.048-.007.072-.009a1.252,1.252,0,0,1,.81.237c.023.016.045.031.068.048l.018.013a2.856,2.856,0,0,1,.539.566,6.45,6.45,0,0,1,.883,1.943c-.365-3.221-1.553-4.374-2.675-4.149h0l-.024-.015a2.3,2.3,0,0,0-.211-.116,4.75,4.75,0,0,1,1.6-.277h0a4.747,4.747,0,0,1,1.773.342q.172.07.338.152h0q-.092-.487-.2-.942c-.085-.343-.176-.672-.277-.982-1.146-3.555-3.219-4.8-4.33.352q.193-.085.39-.157a6.564,6.564,0,0,1,1.415-.348,2.98,2.98,0,0,1,1.072-1.77,5.531,5.531,0,0,1,1.046,1.83,6.636,6.636,0,0,0-7.878,6.268,18.881,18.881,0,0,1,2.288-1.888,4.764,4.764,0,0,1,.5-.876Z" transform="translate(120.122 -919.316)" fill="#0666bc"/>
    <path id="Path_971" data-name="Path 971" d="M492.616,723.492a17.7,17.7,0,0,1,.436,2.1,4.785,4.785,0,0,1,.5.416,18.342,18.342,0,0,0-.442-2.309c-.577-2.192-1.483-3.652-2.391-3.475C491.444,720.5,492.135,721.749,492.616,723.492Z" transform="translate(-12.836 -920.32)" fill="#0666bc"/>
    <path id="Path_972" data-name="Path 972" d="M313.31,885.432a18.025,18.025,0,0,1,1.83-1.605,4.749,4.749,0,0,1,.084-.613,18.576,18.576,0,0,0-1.977,1.685c-1.61,1.595-2.421,3.11-1.815,3.808C311.306,887.942,312.041,886.72,313.31,885.432Z" transform="translate(157.535 -1075.043)" fill="#0666bc"/>
    <path id="Path_973" data-name="Path 973" d="M480.213,802.361q-.023.211-.059.417a6.583,6.583,0,0,1-.406,1.4,2.983,2.983,0,0,1,1,1.813,5.53,5.53,0,0,1-2.112-.01h0a6.629,6.629,0,0,0-1.487-9.955,18.769,18.769,0,0,1,.475,2.765,4.755,4.755,0,0,1,.422.792,10.557,10.557,0,0,0-4.144-1.966,4.606,4.606,0,0,1,.893,1.923c1.538.674,2.2,1.619,2.1,2.351h0a1.084,1.084,0,0,1-.049.2l0,.012c-.008.023-.018.045-.029.068a1.252,1.252,0,0,1-.611.584l-.076.035-.02.008a2.857,2.857,0,0,1-.759.184,6.45,6.45,0,0,1-2.124-.207c2.972,1.295,4.565.842,4.931-.244h0l.025-.014c.042-.022.081-.045.12-.07a4.766,4.766,0,0,1-2.006,2.928c-.1.069-.208.134-.317.194h0a16.374,16.374,0,0,0,2.38.719h0C482,807.069,484.121,805.9,480.213,802.361Z" transform="translate(3.774 -992.28)" fill="#0666bc"/>
    <path id="Path_974" data-name="Path 974" d="M502.524,991.523a18.317,18.317,0,0,1-2.57-.893,4.722,4.722,0,0,1-.677.181,18.931,18.931,0,0,0,2.816,1.031c2.187.6,3.9.541,4.205-.333C505.7,992,504.274,991.979,502.524,991.523Z" transform="translate(-20.962 -1177.005)" fill="#0666bc"/>
    <path id="Path_975" data-name="Path 975" d="M330.394,889.473a11.069,11.069,0,0,0,3.523-2.513,4.606,4.606,0,0,1-2.112-.188c-1.353,1-2.5,1.1-3.085.641h0a1.084,1.084,0,0,1-.145-.141l-.008-.01c-.015-.019-.03-.038-.044-.058a1.253,1.253,0,0,1-.2-.821c0-.027,0-.055.008-.083a.15.15,0,0,1,0-.021,2.856,2.856,0,0,1,.22-.75,6.45,6.45,0,0,1,1.241-1.736c-2.607,1.926-3.011,3.532-2.253,4.393h0v.09a4.752,4.752,0,0,1-1.532-2.785q-.028-.173-.043-.35h0a16.184,16.184,0,0,0-1.672,1.586h0c-2.506,2.77-2.549,5.189,2.468,3.573q-.17-.124-.331-.259a6.574,6.574,0,0,1-1.009-1.052,2.979,2.979,0,0,1-2.068-.044,5.53,5.53,0,0,1,1.064-1.823,6.635,6.635,0,0,0,9.368,3.689,19.226,19.226,0,0,1-3.4-1.338Z" transform="translate(146.715 -1075.593)" fill="#0666bc"/>
  </g>
</svg>